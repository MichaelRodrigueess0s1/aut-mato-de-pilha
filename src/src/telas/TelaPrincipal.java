/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

package telas;

import automato.Estado;
import automato.Transicao;
import estruturas.SimpleStack;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.List;
import java.util.PriorityQueue;
import java.util.Queue;
import javax.swing.JOptionPane;
import estruturas.SimpleStack;
import estruturas.Verificador;

/**
 *
 * @author Michael
 */
public class TelaPrincipal extends javax.swing.JFrame {
    
    
   private static boolean criarInicial= true; // flag do estado inicial
   private static int numeroEstados =1; // Flag dos numero de estados
   //final char lambda;
   private static boolean isVisivel = false;
   private static Queue fila = new PriorityQueue(); // Fila de execução do alfabeto de entrada
   private static ArrayList<Transicao> arrayTransicoes = new ArrayList<Transicao>();
   private static ArrayList<Estado> arrayEstados = new ArrayList<Estado>();
  private static List alfabetoEntrada = new ArrayList(); /* Array com caracteres do alfabeto de entrada, antes de criar qualquer
                                                    transição, verificar se o simbolo da transição existe na lista */ 
     private static List alfabetoPilha = new ArrayList();
     private static SimpleStack pilha = new SimpleStack(100000);
     private static ArrayList<Transicao> verificaTransicao = new ArrayList<Transicao>();

    /**
     * Creates new form TelaPrincipal
     */
    public TelaPrincipal() {
        initComponents();
    }


    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jTextField1 = new javax.swing.JTextField();
        jButtonAddEstados = new javax.swing.JButton();
        jButtonEntrarTransicao = new javax.swing.JButton();
        jButtonInsereAlfabeto = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jButtonInserePilha = new javax.swing.JButton();
        jTextsimbolo = new javax.swing.JTextField();
        jTextEstadoOrigem = new javax.swing.JTextField();
        jTextEstadoDestino = new javax.swing.JTextField();
        jTextEmpilha = new javax.swing.JTextField();
        jTextDesempilha = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        jTextTestaAlfabeto = new javax.swing.JTextField();
        jButtonTestarEntrada = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextResult = new javax.swing.JTextArea();
        jLabel3 = new javax.swing.JLabel();
        jButtonSalvar = new javax.swing.JButton();
        jButtonCarregar = new javax.swing.JButton();
        jSeparator4 = new javax.swing.JSeparator();
        jLabel4 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        jLabel14 = new javax.swing.JLabel();
        jLabel15 = new javax.swing.JLabel();
        jSeparator1 = new javax.swing.JSeparator();
        jSeparator2 = new javax.swing.JSeparator();
        jLabel16 = new javax.swing.JLabel();

        jTextField1.setText("jTextField1");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Simulador de APD");
        setPreferredSize(new java.awt.Dimension(900, 600));
        setResizable(false);

        jButtonAddEstados.setText("adicionar estados");
        jButtonAddEstados.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonAddEstadosActionPerformed(evt);
            }
        });

        jButtonEntrarTransicao.setText("adicionar transição");
        jButtonEntrarTransicao.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonEntrarTransicaoActionPerformed(evt);
            }
        });

        jButtonInsereAlfabeto.setText("inserir");
        jButtonInsereAlfabeto.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonInsereAlfabetoActionPerformed(evt);
            }
        });

        jLabel1.setText("Inserir alfabeto de entrada :");

        jLabel2.setText("Inserir alfabeto da pilha:");

        jButtonInserePilha.setText("inserir");
        jButtonInserePilha.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonInserePilhaActionPerformed(evt);
            }
        });

        jTextEstadoOrigem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextEstadoOrigemActionPerformed(evt);
            }
        });

        jTextDesempilha.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextDesempilhaActionPerformed(evt);
            }
        });

        jLabel5.setText("Simbolo:");

        jLabel6.setText("Est origem:");

        jLabel7.setText("Est destino:");

        jLabel8.setText("Empilha:");

        jLabel9.setText("Desempilha:");

        jLabel10.setForeground(new java.awt.Color(255, 0, 0));

        jTextTestaAlfabeto.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextTestaAlfabetoActionPerformed(evt);
            }
        });

        jButtonTestarEntrada.setText("testar");
        jButtonTestarEntrada.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonTestarEntradaActionPerformed(evt);
            }
        });

        jTextResult.setColumns(20);
        jTextResult.setRows(5);
        jScrollPane1.setViewportView(jTextResult);

        jLabel3.setForeground(new java.awt.Color(255, 0, 0));
        jLabel3.setText("* Favor inserir o caracter \"#\",hastag no alfabeto da pilha  para repreentar lambda!");

        jButtonSalvar.setText("Limpar");
        jButtonSalvar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonSalvarActionPerformed(evt);
            }
        });

        jButtonCarregar.setText("Carregar");
        jButtonCarregar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonCarregarActionPerformed(evt);
            }
        });

        jLabel4.setText("entrada:");

        jLabel11.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel11.setText("Inserir Transição:");

        jLabel12.setFont(new java.awt.Font("MS Reference Sans Serif", 1, 18)); // NOI18N
        jLabel12.setText("SIMULADOR DE AUTÔMATO DE PILHA");

        jLabel14.setText("Limpar todas configurações do simulador");

        jLabel15.setText("Os Resultados serão apresentados no campo de texto abaixo:");

        jLabel16.setText("Carregar autômato da parte 1 do trabalho :");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addComponent(jLabel1)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jButtonInsereAlfabeto, javax.swing.GroupLayout.PREFERRED_SIZE, 64, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(46, 46, 46)
                                .addComponent(jLabel2)
                                .addGap(18, 18, 18)
                                .addComponent(jButtonInserePilha)
                                .addGap(41, 41, 41))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jLabel14)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(jButtonSalvar))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jLabel16)
                                        .addGap(18, 18, 18)
                                        .addComponent(jButtonCarregar)))
                                .addGap(39, 39, 39))))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addGroup(layout.createSequentialGroup()
                                    .addGap(23, 23, 23)
                                    .addComponent(jLabel10))
                                .addComponent(jSeparator1, javax.swing.GroupLayout.DEFAULT_SIZE, 496, Short.MAX_VALUE)
                                .addComponent(jSeparator4))
                            .addComponent(jSeparator2, javax.swing.GroupLayout.PREFERRED_SIZE, 496, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 412, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addContainerGap()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel5)
                                    .addComponent(jTextsimbolo, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(31, 31, 31)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel6)
                                    .addComponent(jTextEstadoOrigem, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel7)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(10, 10, 10)
                                        .addComponent(jTextEstadoDestino, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addGap(29, 29, 29)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel8)
                                    .addComponent(jTextEmpilha, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel9)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jTextDesempilha, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(18, 18, 18)
                                        .addComponent(jButtonEntrarTransicao))))
                            .addGroup(layout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(jLabel11))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(20, 20, 20)
                                .addComponent(jLabel4)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jTextTestaAlfabeto, javax.swing.GroupLayout.PREFERRED_SIZE, 322, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jButtonTestarEntrada))
                            .addGroup(layout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(jLabel12, javax.swing.GroupLayout.PREFERRED_SIZE, 385, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(181, 181, 181)
                                .addComponent(jButtonAddEstados)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 335, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel15, javax.swing.GroupLayout.PREFERRED_SIZE, 335, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(266, 266, 266))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(82, 82, 82)
                .addComponent(jButtonAddEstados)
                .addGap(29, 29, 29)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButtonInserePilha)
                    .addComponent(jLabel2)
                    .addComponent(jButtonInsereAlfabeto)
                    .addComponent(jLabel1))
                .addGap(11, 11, 11)
                .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel10)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator2, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel11)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 57, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel9)
                    .addComponent(jLabel8)
                    .addComponent(jLabel7)
                    .addComponent(jLabel6)
                    .addComponent(jLabel5))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTextsimbolo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jTextEstadoOrigem, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jTextEstadoDestino, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jTextEmpilha, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jTextDesempilha, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButtonEntrarTransicao))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(29, 29, 29)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTextTestaAlfabeto, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButtonTestarEntrada)
                    .addComponent(jLabel4))
                .addGap(22, 22, 22)
                .addComponent(jSeparator4, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButtonCarregar)
                    .addComponent(jLabel16))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel14)
                    .addComponent(jButtonSalvar))
                .addContainerGap(61, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel15)
                    .addComponent(jLabel12))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButtonAddEstadosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonAddEstadosActionPerformed
        // Botão Criar Estados
        
			 Estado novo = null; // Cria um estado com null
        
		        
		        if(criarInicial == true){ // se o estado for o primeiro ser� criado dentro deste loop
		           
		        	String nome = "Q"+numeroEstados;
		        
		        	JOptionPane.showMessageDialog(null, "O Estado " +nome+" é inicial!");
		        	
                                    int isfinal = JOptionPane.showConfirmDialog(null,  // Pergunta se o estado é final
		                    "O estado "+nome+" e final?", "Sim ou nao?", JOptionPane.YES_NO_OPTION);  
		                    boolean flagFinal;  
		                    flagFinal = isfinal == JOptionPane.YES_OPTION;
		                    
		                    novo = new Estado(nome, true, flagFinal);  // Cria o estado
                                    
		             // Exibe as configurações do estado na JtextArea
                             jTextResult.setText(jTextResult.getText() + "\n" +
                                     "---------Configuracoes do estado " +nome+"-------------" 
                                     + "\nnome do estado :" + novo.getNome() +
                                     "\nestado inicial :" + novo.isEsInicial()+
                                     "\nestado final :" + novo.isEsFinal()+"\n" );
		            
                             
		            criarInicial = false; // A partir do primeiro estado os outros não podem ser iniciais 
                            arrayEstados.add(novo); // Adiciona o estado no array de estados
		            numeroEstados ++;   // flecha para o proximo estado
		}  
                        else 
			if(criarInicial == false) {
			
			String nome = "Q"+numeroEstados;
                        int isfinal = JOptionPane.showConfirmDialog(null,  // Pergunta se o estado � final
                         "O estado "+nome+" é final?", "Sim ou nao?", JOptionPane.YES_NO_OPTION);  
                        boolean flagFinal;  
                        flagFinal = isfinal == JOptionPane.YES_OPTION;
                    
                         novo = new Estado(nome, false, flagFinal);  // Cria o estado
          
                         criarInicial = false; // A partir do primeiro estado os outros não serao inicias

                  // Para fins didaticos apresento as configuracoes do estado
                             jTextResult.setText(jTextResult.getText() + "\n" 
                                      +"---------Configuracoes do estado " +nome+"-------------" 
                                     + "\nnome do estado :" + novo.getNome() +
                                     "\nestado inicial :" + novo.isEsInicial() +
                                     "\nestado final :" + novo.isEsFinal()+"\n" );
		            
            arrayEstados.add(novo);
            numeroEstados++;
            
		}
		        
    }//GEN-LAST:event_jButtonAddEstadosActionPerformed

    private void jButtonEntrarTransicaoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonEntrarTransicaoActionPerformed
        // Botão para adicionar transições
        
        Transicao nova = null; 
        Character simbolo,desempilha,empilha;
        String origem, destino;
        Estado esOrigem = null, esDestino = null; /* Inicializa os estados com null para não
        ser inserido errado na transição*/
        
        simbolo = jTextsimbolo.getText().charAt(0);
        origem = jTextEstadoOrigem.getText();
        destino = jTextEstadoDestino.getText();
        empilha = jTextEmpilha.getText().charAt(0);
        desempilha = jTextDesempilha.getText().charAt(0);
        
        
        
        if(alfabetoEntrada.contains(simbolo))
        { // Se o simbolo existe no alfabeto     
            
         if(alfabetoPilha.contains(empilha) && alfabetoPilha.contains(desempilha))
         { // se o simbolo da pilha existe no alfabeto da pilha
             
             
             
             
            for(int i=0; i<arrayEstados.size(); i++)
            { // verifica se os estados de origem e destino existem, caso positivo são recuperados
                if(arrayEstados.get(i).getNome().equals(origem) ){
                    esOrigem = arrayEstados.get(i);      
                }
                if(arrayEstados.get(i).getNome().equals(destino)){
                    esDestino = arrayEstados.get(i);
                }
            }
         } else{
                JOptionPane.showMessageDialog(this,"Não é possivel inserir a transição! "
                        + "\nsimbolo não existe no alfabeto da pilha");
                }
        if((!esDestino.equals(null)) && (!esOrigem.equals(null))){ /* Transição somente será inserida se existir simbolo
            no alfabeto de transições, se empilhar e desempilhar existirem no alfabeto da pilha, e se os estados
            origem e destinos existirem!
            */  
            
              /* Se empilha ou desempilha possuir o simbolo "-" dado para representar lambda (
                transição vazia, os valores de empilha ou desempilha passa a ser null
                */
  
            
            nova = new Transicao(simbolo, esOrigem, esDestino, desempilha, empilha);
            
         
            boolean flag =true;
            for( int indice =0; indice < arrayTransicoes.size(); indice++){
                
                
                if(         // Mesmo Estado de origem, mesmo simbolo e mesmo desempilha
                        (arrayTransicoes.get(indice).getOrigem() == nova.getOrigem() && // Estado origem
                         arrayTransicoes.get(indice).getSimbolo()== nova.getSimbolo()&& // simbolo
                         arrayTransicoes.get(indice).getDesempilha() == nova.getDesempilha() // desempilha
                        )                         ||
                        // Mesmo estado de origem, mesmo simbolo e um desempilha é lambda
                        (arrayTransicoes.get(indice).getOrigem() == nova.getOrigem() && // Estado origem
                         arrayTransicoes.get(indice).getSimbolo()== nova.getSimbolo()&& //simbolo
                         (arrayTransicoes.get(indice).getDesempilha() == lambda || // desempilha é lambda
                         nova.getDesempilha() == lambda)
                         )
                    ){ 
                        flag = false;
                        JOptionPane.showMessageDialog(this, "Transição não aceita! pois configura"
                                + "uma transição não deterministica");
                     }             
                }
                       if(flag){
                           arrayTransicoes.add(nova);
                           esOrigem.addTransicao(nova);  // Adiciona a transição ao estado de origem
                           
                           
                          JOptionPane.showMessageDialog(this,"Transição inserida com sucesso!");
                          
                          
                          jTextResult.setText(jTextResult.getText() +"\n---------CONFIGURAÇÕES DA TRANSIÇÃO----------\n" 
                                     +"\nSimbolo de transição :"+ nova.getSimbolo() 
                                     +"\nEstado de origem :" + nova.getOrigem().getNome()
                                     +"\nEstado destino :" + nova.getProximo().getNome()
                                     +"\nEmpilha :" + nova.getEmpilha()
                                     +"\nDesempilha :" + nova.getDesempilha());
                       }
                     
        } 
        else {
           JOptionPane.showConfirmDialog(rootPane, "Transição não pode ser inserida estados invalidos!"); 
        }    
        }
        else{
            JOptionPane.showMessageDialog(this, "Não é possivel criar a transição! "
                    + "\nelemento não existe no alfabeto de entrada!");
        }
        
        /* Faltar tratar os casos de transições não deterministicas*/
    }//GEN-LAST:event_jButtonEntrarTransicaoActionPerformed

    
    
    
    
    
    
    
    
    
    
    private void jButtonInsereAlfabetoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonInsereAlfabetoActionPerformed
        // Inserir elementos no alfabeto de entrada
        
        
         String simbolo = JOptionPane.showInputDialog(null, "Digite o simbolo de entrada : "
                 + "\nserá aceito somente o primeiro simbolo digitado"
                 + "\n Não será aceito simbolos do alfabeto da pilha" 
                 );
        
        if(!alfabetoEntrada.contains(simbolo.charAt(0))){
           
            if(!alfabetoPilha.contains(simbolo.charAt(0))){                
                alfabetoEntrada.add(simbolo.charAt(0));                
            } else{
                JOptionPane.showMessageDialog(null, "Impossivel inserir Elemento existente na pilha!");
            }
        }
        else{
             JOptionPane.showMessageDialog(rootPane, "Impossivel  inserir simbolos existente no alfabeto de entrada! ");
        }
         
         
         
         jTextResult.setText(jTextResult.getText() + "\n---ELEMENTOS DO ALFABETO DE ENTRADA---\n"  );
         Iterator it = alfabetoEntrada.iterator();
         String imprime ="";
        while(it.hasNext()) { 
           imprime += it.next() + "|"; 
         
        } 
        jTextResult.setText(jTextResult.getText() + imprime);
        
        
        
    }//GEN-LAST:event_jButtonInsereAlfabetoActionPerformed

    private void jButtonInserePilhaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonInserePilhaActionPerformed
        // Inserir alfabeto  da pilha
        
         String simbolo = JOptionPane.showInputDialog(null, "Digite o simbolo da pilha:"
                 + "\nserá aceito somente o primeiro caracter digitado!,"
                 + "\n Não será aceito simbolos do alfabeto de entrada,"
                 + "\n Não será aceito caracter repetido.");
         
        if(!alfabetoEntrada.contains(simbolo.charAt(0))){
           
            if(!alfabetoPilha.contains(simbolo.charAt(0))){
                
                alfabetoPilha.add(simbolo.charAt(0));
                
            } else{
                JOptionPane.showMessageDialog(null, "Impossivel inserir Elemento existente na pilha!");
            }
        }
        else{
             JOptionPane.showMessageDialog(rootPane, "Impossivel  inserir simbolos existente no alfabeto de entrada! ");
        } 
            jTextResult.setText(jTextResult.getText() + "\n---ELEMENTOS DA PILHA---\n"  );
            Iterator it = alfabetoPilha.iterator();
            String imprime ="";
            while(it.hasNext()) { 
           imprime += it.next() + "-"; 
         
        } 
        jTextResult.setText(jTextResult.getText() + imprime);
        
        
    }//GEN-LAST:event_jButtonInserePilhaActionPerformed

    private void jTextEstadoOrigemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextEstadoOrigemActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextEstadoOrigemActionPerformed

    private void jTextDesempilhaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextDesempilhaActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextDesempilhaActionPerformed

    private void jButtonTestarEntradaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonTestarEntradaActionPerformed
        // Botão de execução do automato
        jTextResult.setText(jTextResult.getText() + "\n ---------Simulando Execução----------");
        boolean umEstadoFinal = false;
        Character s;
        
        for (Estado e: arrayEstados){
            if(e.isEsFinal()){
                umEstadoFinal = true;
                break;
            }
        }
        
        if(umEstadoFinal){
            /*
            Procurar pelo estado inicial
            */
            Estado estadoInicial = null;
            pilha.clear();
            
            for(Estado e: arrayEstados){
                if(e.isEsInicial()){
                    estadoInicial = e;
                    break;
                }
            }
            
            Estado estadoAtual = estadoInicial;
            int countReconhecidos =0;
            /*Começo a verificar a fila de execução a partir do estado inicial*/
            //for(char s : jTextTestaAlfabeto.getText().trim().toCharArray()){
            for(int v =0; v<jTextTestaAlfabeto.getText().length(); v++){
                // Percore cada transição 
                
               s = jTextTestaAlfabeto.getText().charAt(v);
                
                //for(Transicao t : estadoAtual.getListaTransicao()){
                    for(int i=0; i< estadoAtual.getListaTransicao().size(); i++){
                        
                            Transicao t = estadoAtual.getListaTransicao().get(i);
                   
                    // Se o simbolo da transições do estado for igual ao character atual e desempilha estiver na pilha ou for lambda
                   if(t.getSimbolo() == s  && (t.getDesempilha() == lambda || t.getDesempilha() == pilha.peek()) ){

                                      // TRANSIÇÕES QUE NÂO DESEMPILHAM
                            if(t.getDesempilha() == lambda){
                                if(t.getEmpilha() == lambda){        
                                    jTextResult.setText(jTextResult.getText() +
                                             "\n-------------------" +
                                             "\nEstado --> "+estadoAtual.getNome()
                                             +"\nSimbolo lido: " +t.getSimbolo()
                                             +"\nDesempilha: "+t.getDesempilha()
                                             +"\nEmpilha: "+t.getEmpilha()
                                             +"\nEstado destino: " + t.getProximo().getNome()
                                             + "\n------------------");
                               
                                            countReconhecidos ++;
                                            estadoAtual = t.getProximo();
                                            break;    
                                            // Reconhece o simbolo e vai para o proximo estado sem mecher na pilha.
                                    } 
                                      else { //Desempilha é lambda e empilha algun símbolo
                                         jTextResult.setText(jTextResult.getText() +
                                             "\n-------------------" +
                                             "\nEstado --> "+estadoAtual.getNome()
                                             +"\nSimbolo lido: " +t.getSimbolo()
                                             +"\nDesempilha: "+t.getDesempilha()
                                             +"\nEmpilha: "+t.getEmpilha()
                                             +"\nEstado destino: " + t.getProximo().getNome()
                                             + "\n------------------");
                                            pilha.push(t.getEmpilha());
                                            countReconhecidos ++;
                                            estadoAtual = t.getProximo();
                                            
                                            // reconhece o simbolo e vai para o proximo estado e empilha.
                                          break;
                                          }
                                }
                                     // TRANSIÇÔES QUE DESEMPILHAM
                                    else if(t.getDesempilha()==pilha.peek()){
                                    // Se desempilha estiver no topo
                                            if(t.getEmpilha() == lambda){
                                                     pilha.pop();
                                                     jTextResult.setText(jTextResult.getText() +
                                                      "\n-------------------" +
                                                    "\nEstado --> "+estadoAtual.getNome()
                                                    +"\nSimbolo lido: " +t.getSimbolo()
                                                    +"\nDesempilha: "+t.getDesempilha()
                                                    +"\nEmpilha: "+t.getEmpilha()
                                                    +"\nEstado destino: " + t.getProximo().getNome()
                                                    + "\n------------------");
                                                    countReconhecidos ++;
                                                    estadoAtual = t.getProximo();
                                                   break;
                                } 
                                            else {

                                                jTextResult.setText(jTextResult.getText() +
                                                        "\n-------------------" +
                                                      "\nEstado --> "+estadoAtual.getNome()
                                                      +"\nSimbolo lido: " +t.getSimbolo()
                                                      +"\nDesempilha: "+t.getDesempilha()
                                                      +"\nEmpilha: "+t.getEmpilha()
                                                      +"\nEstado destino: " + t.getProximo().getNome()
                                                      + "\n------------------");

                                                        pilha.pop();
                                                        pilha.push(t.getEmpilha());
                                                        countReconhecidos ++;
                                                        estadoAtual = t.getProximo();
                                                        break;
                                            }
                                    }
                   } 
                                        
                    }
            }
            
            if(countReconhecidos == jTextTestaAlfabeto.getText().length() && estadoAtual.isEsFinal() && pilha.isEmpty()){
                
                JOptionPane.showMessageDialog(this, "Reconhecido");
                
            }
            else{
                JOptionPane.showMessageDialog(this, "Não Reconhecido!");
            }
        }
        
    }//GEN-LAST:event_jButtonTestarEntradaActionPerformed

    private void jButtonSalvarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonSalvarActionPerformed
        // TODO add your handling code here:
        
        for(int i =0; i< arrayEstados.size(); i++){
            
            arrayEstados.get(i).Desconstrutor();
            
        }
        
        
        numeroEstados =1;
        criarInicial = true;
        fila.clear();
        arrayTransicoes.clear();
        arrayEstados.clear();
        alfabetoEntrada.clear();
        alfabetoPilha.clear();
        pilha.clear();
        jTextResult.setText("Configurações do Automatos foram limpas!");
        
        
        
        
        
    }//GEN-LAST:event_jButtonSalvarActionPerformed

    private void jButtonCarregarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonCarregarActionPerformed
        // TODO add your handling code here:
        
        // Limpa todas as estruturas do automato
        
        
        fila.clear();
        arrayTransicoes.clear();
        arrayEstados.clear();
        alfabetoEntrada.clear();
        alfabetoPilha.clear();
        pilha.clear();
        
       
        
        // Configuração dos estados do automato
        
        
        Estado q1= new Estado("Q1", true, false); // digito | ( | 
        Estado q2= new Estado("Q2", false, true); // Digito | . | ) | FINAL
        Estado q3= new Estado("Q3", false, false); // ( | digito
        Estado q4= new Estado("Q4", false, true); // ) | Operador | FINAL 
        Estado q5= new Estado("Q5", false, false); // Digito | 
        Estado q6= new Estado("Q6", false, true);//  Digito | ) | Operador
        
        
        
        
         Estado q26 = new Estado("Q26", false, false); // S
         Estado q27 = new Estado("Q27", false, false);// E
         Estado q28 = new Estado("Q28", false, false); //N
        
        
        // ABS
        Estado q7= new Estado("Q7", false, false); //a
        Estado q8= new Estado("Q8", false, false); //b
        Estado q9= new Estado("Q9", false, false); //s
        
       // SQRT
        Estado q10= new Estado("Q10", false, false);//s
        Estado q11= new Estado("Q11", false, false);//q
        Estado q12= new Estado("Q12", false, false);//r
        Estado q13= new Estado("Q13", false, false);//t -->Q20
        
        // TAN
        Estado q14= new Estado("Q14", false, false);//t
        Estado q15= new Estado("Q15", false, false);//a
        Estado q16= new Estado("Q16", false, false);//n -->Q20
        
        // COS
        Estado q17= new Estado("Q17", false, false);//c
        Estado q18= new Estado("Q18", false, false);//o
        Estado q19= new Estado("Q19", false, false);//s --Q20
        
        
        
        // Expressão após as funções
        Estado q20= new Estado("Q20", false, false);// ( 
        Estado q21= new Estado("Q21", false, false);//Digito
        Estado q22= new Estado("Q22", false, false);//Digito| . | )
        Estado q23= new Estado("Q23", false, false);// Digito
        Estado q24= new Estado("Q24", false, false);// Digito | )
        
        Estado q25= new Estado("Q25", false, true);// Operador | )
        
        
        // Configuração das transições
        
        
        // Transições do estado Q1  para Q2  
        Transicao t1 = new Transicao('1', q1, q2, lambda, lambda);
        q1.addTransicao(t1);
        Transicao t2 = new Transicao('2', q1, q2, lambda, lambda);
        q1.addTransicao(t2);
        Transicao t3 = new Transicao('3', q1, q2, lambda, lambda);
        q1.addTransicao(t3);
        Transicao t4 = new Transicao('4', q1, q2, lambda, lambda);
        q1.addTransicao(t4);
        Transicao t5 = new Transicao('5', q1, q2, lambda, lambda);
        q1.addTransicao(t5);
        Transicao t6 = new Transicao('6', q1, q2, lambda, lambda);
        q1.addTransicao(t6);
        Transicao t7 = new Transicao('7', q1, q2, lambda, lambda);
        q1.addTransicao(t7);
        Transicao t8 = new Transicao('8', q1, q2, lambda, lambda);
        q1.addTransicao(t8);
        Transicao t9 = new Transicao('9', q1, q2, lambda, lambda);
        q1.addTransicao(t9);
        Transicao t10 = new Transicao('0', q1, q2, lambda, lambda);
        q1.addTransicao(t10);
        
        // Transições do estado Q1 para Q3
       
        Transicao t11 = new Transicao('(', q1, q3, lambda, 'x');
        q1.addTransicao(t11);
        
              // FUNÇÂO TAN()
        
        
         Transicao t69 = new Transicao('t', q1, q7, lambda, lambda);
        q1.addTransicao(t69);
        
        
         Transicao t134 = new Transicao('t', q3, q7, lambda, lambda);
        q3.addTransicao(t134);
        
         Transicao t73 = new Transicao('a', q7, q11, lambda, lambda);
        q7.addTransicao(t73);
        
         Transicao t74 = new Transicao('n', q11, q20, lambda, lambda);
        q11.addTransicao(t74);
        
        
        
         // Funsão SEN
        Transicao t150 = new Transicao('s', q1, q26, lambda, lambda);
        q1.addTransicao(t150);

        Transicao t151 = new Transicao('s', q3, q26, lambda, lambda);
        q3.addTransicao(t151);

        Transicao t152 = new Transicao('e', q26, q27, lambda, lambda);
        q26.addTransicao(t152);

        Transicao t153 = new Transicao('n', q27, q20, lambda, lambda);
        q27.addTransicao(t153);
       
         // Função COS()
       
        
         Transicao t70 = new Transicao('c', q1, q8, lambda, lambda);
        q1.addTransicao(t70);
        
         Transicao t133 = new Transicao('c', q3, q8, lambda, lambda);
        q3.addTransicao(t133);
        
        Transicao t75 = new Transicao('o', q8, q12, lambda, lambda);
        q8.addTransicao(t75);
        
        
        Transicao t76 = new Transicao('s', q12, q20, lambda, lambda);
        q12.addTransicao(t76);
 
                
                // Função SQRT()
           
        
        Transicao t77 = new Transicao('q', q26, q13, lambda, lambda);
        q26.addTransicao(t77);
        
        Transicao t78 = new Transicao('r', q13, q17, lambda, lambda);
        q13.addTransicao(t78);
        
        Transicao t79 = new Transicao('t', q17, q20, lambda, lambda);
        q17.addTransicao(t79);
        
        
        
                   // Funsão ABS()
          // Transições do estado Q1 para Q10  (68)
        
         Transicao t72 = new Transicao('a', q1, q10, lambda, lambda);
        q1.addTransicao(t72);
        
          Transicao t131 = new Transicao('a', q3, q10, lambda, lambda);
        q1.addTransicao(t131);
        
        
        Transicao t80 = new Transicao('b', q10, q14, lambda, lambda);
        q10.addTransicao(t80);
       
         Transicao t81 = new Transicao('s', q14, q20, lambda, lambda);
        q14.addTransicao(t81);
        
        
        // Transições do estado Q2 para Q1
        
        Transicao t12 = new Transicao('+', q2, q1, lambda, lambda);
        q2.addTransicao(t12);
        Transicao t13 = new Transicao('-', q2, q1, lambda, lambda);
        q2.addTransicao(t13);
        Transicao t14 = new Transicao('*', q2, q1, lambda, lambda);
        q2.addTransicao(t14);
        Transicao t15 = new Transicao('/', q2, q1, lambda, lambda);
        q2.addTransicao(t15);
        
        // Transições do estado Q2 para Q2
        
         Transicao t16 = new Transicao('1', q2, q2, lambda, lambda);
        q2.addTransicao(t16);
        Transicao t17 = new Transicao('2', q2, q2, lambda, lambda);
        q2.addTransicao(t17);
        Transicao t18 = new Transicao('3', q2, q2, lambda, lambda);
        q2.addTransicao(t18);
        Transicao t19 = new Transicao('4', q2, q2, lambda, lambda);
        q2.addTransicao(t19);
        Transicao t20 = new Transicao('5', q2, q2, lambda, lambda);
        q2.addTransicao(t20);
        Transicao t21 = new Transicao('6', q2, q2, lambda, lambda);
        q2.addTransicao(t21);
        Transicao t22 = new Transicao('7', q2, q2, lambda, lambda);
        q2.addTransicao(t22);
        Transicao t23 = new Transicao('8', q2, q2, lambda, lambda);
        q2.addTransicao(t23);
        Transicao t24 = new Transicao('9', q2, q2, lambda, lambda);
        q2.addTransicao(t24);
        Transicao t25 = new Transicao('0', q2, q2, lambda, lambda);
        q2.addTransicao(t25);
        
        
        // Transições do estado Q2 para Q4
        
        
         Transicao t26 = new Transicao(')', q2, q4, 'x', lambda);
        q2.addTransicao(t26);
        
        
        // Transicoes do estado Q2 para Q5
        
        Transicao t27 = new Transicao('.', q2, q5, lambda, lambda);
        q2.addTransicao(t27);
        
        // Transições do estado Q3 para Q2
        
        Transicao t28 = new Transicao('1', q3, q2, lambda, lambda);
        q3.addTransicao(t28);
        Transicao t29 = new Transicao('2', q3, q2, lambda, lambda);
        q3.addTransicao(t29);
        Transicao t30 = new Transicao('3', q3, q2, lambda, lambda);
        q3.addTransicao(t30);
        Transicao t31 = new Transicao('4', q3, q2, lambda, lambda);
        q3.addTransicao(t31);
        Transicao t32 = new Transicao('5', q3, q2, lambda, lambda);
        q3.addTransicao(t32);
        Transicao t33 = new Transicao('6', q3, q2, lambda, lambda);
        q3.addTransicao(t33);
        Transicao t34 = new Transicao('7', q3, q2, lambda, lambda);
        q3.addTransicao(t34);
        Transicao t35 = new Transicao('8', q3, q2, lambda, lambda);
        q3.addTransicao(t35);
        Transicao t36 = new Transicao('9', q3, q2, lambda, lambda);
        q3.addTransicao(t36);
        Transicao t37 = new Transicao('0', q3, q2, lambda, lambda);
        q3.addTransicao(t37);
        
        
        // Transições do estado Q3 para Q3
        
        Transicao t38 = new Transicao('(', q3, q3, lambda, 'x');
        q3.addTransicao(t38);
        
        
        // Transições do estado Q4 para Q1
        
         Transicao t39 = new Transicao('+', q4, q1, lambda, lambda);
        q4.addTransicao(t39);
        Transicao t40 = new Transicao('-', q4, q1, lambda, lambda);
        q4.addTransicao(t40);
        Transicao t41 = new Transicao('*', q4, q1, lambda, lambda);
        q4.addTransicao(t41);
        Transicao t42 = new Transicao('/', q4, q1, lambda, lambda);
        q4.addTransicao(t42);
        
        // Transições do estado Q4 para Q4
        
        Transicao t43 = new Transicao(')', q4, q4, 'x', lambda);
        q4.addTransicao(t43);
        
        // Transições do estado Q5 para Q6
        
       Transicao t44 = new Transicao('1', q5, q6, lambda, lambda);
        q5.addTransicao(t44);
        Transicao t45 = new Transicao('2', q5, q6, lambda, lambda);
        q5.addTransicao(t45);
        Transicao t46 = new Transicao('3', q5, q6, lambda, lambda);
        q5.addTransicao(t46);
        Transicao t47 = new Transicao('4', q5, q6, lambda, lambda);
        q5.addTransicao(t47);
        Transicao t48 = new Transicao('5', q5, q6, lambda, lambda);
        q5.addTransicao(t48);
        Transicao t49 = new Transicao('6', q5, q6, lambda, lambda);
        q5.addTransicao(t49);
        Transicao t50 = new Transicao('7', q5, q6, lambda, lambda);
        q5.addTransicao(t50);
        Transicao t51 = new Transicao('8', q5, q6, lambda, lambda);
        q5.addTransicao(t51);
        Transicao t52 = new Transicao('9', q5, q6, lambda, lambda);
        q5.addTransicao(t52);
        Transicao t53 = new Transicao('0', q5, q6, lambda, lambda);
        q5.addTransicao(t53);
        
        // Transições do estado Q6 para Q1
        
         Transicao t54 = new Transicao('+', q6, q1, lambda, lambda);
        q6.addTransicao(t54);
        Transicao t55 = new Transicao('-', q6, q1, lambda, lambda);
        q6.addTransicao(t55);
        Transicao t56 = new Transicao('*', q6, q1, lambda, lambda);
        q6.addTransicao(t56);
        Transicao t57 = new Transicao('/', q6, q1, lambda, lambda);
        q6.addTransicao(t57);
        
        
        
        // Transições do estado Q6 para Q4
        
        Transicao t58 = new Transicao(')', q6, q4, 'x', lambda);
        q6.addTransicao(t58);
        
        // Transições do estado Q6 para Q6
        
        Transicao t59 = new Transicao('1', q6, q6, lambda, lambda);
        q6.addTransicao(t59);
        Transicao t60 = new Transicao('2', q6, q6, lambda, lambda);
        q6.addTransicao(t60);
        Transicao t61 = new Transicao('3', q6, q6, lambda, lambda);
        q6.addTransicao(t61);
        Transicao t62 = new Transicao('4', q6, q6, lambda, lambda);
        q6.addTransicao(t62);
        Transicao t63 = new Transicao('5', q6, q6, lambda, lambda);
        q6.addTransicao(t63);
        Transicao t64 = new Transicao('6', q6, q6, lambda, lambda);
        q6.addTransicao(t64);
        Transicao t65 = new Transicao('7', q6, q6, lambda, lambda);
        q6.addTransicao(t65);
        Transicao t66 = new Transicao('8', q6, q6, lambda, lambda);
        q6.addTransicao(t66);
        Transicao t67 = new Transicao('9', q6, q6, lambda, lambda);
        q6.addTransicao(t67);
        Transicao t68 = new Transicao('0', q6, q6, lambda, lambda);
        q6.addTransicao(t68);
        
        
        // Transições do estado Q20 para Q21
        
         Transicao t130 = new Transicao('(', q20, q21, lambda, lambda);
        q20.addTransicao(t130);
        
        
        
        //82 Transições do estado Q21 para Q22
       
        Transicao t82 = new Transicao('1', q21, q22, lambda, lambda);
        q21.addTransicao(t82);
        Transicao t83 = new Transicao('2', q21, q22, lambda, lambda);
        q21.addTransicao(t83);
        Transicao t84 = new Transicao('3', q21, q22, lambda, lambda);
        q21.addTransicao(t84);
        Transicao t85 = new Transicao('4', q21, q22, lambda, lambda);
        q21.addTransicao(t85);
        Transicao t86 = new Transicao('5', q21, q22, lambda, lambda);
        q21.addTransicao(t86);
        Transicao t87 = new Transicao('6', q21, q22, lambda, lambda);
        q21.addTransicao(t87);
        Transicao t88 = new Transicao('7', q21, q22, lambda, lambda);
        q21.addTransicao(t88);
        Transicao t89 = new Transicao('8', q21, q22, lambda, lambda);
        q21.addTransicao(t89);
        Transicao t90 = new Transicao('9', q21, q22, lambda, lambda);
        q21.addTransicao(t90);
        Transicao t91 = new Transicao('0', q21, q22, lambda, lambda);
        q21.addTransicao(t91);
        
        
        // Transições do estado Q22 para Q22
       
         
        Transicao t92 = new Transicao('1', q22, q22, lambda, lambda);
        q22.addTransicao(t92);
        Transicao t93 = new Transicao('2', q22, q22, lambda, lambda);
        q22.addTransicao(t93);
        Transicao t94 = new Transicao('3', q22, q22, lambda, lambda);
        q22.addTransicao(t94);
        Transicao t95 = new Transicao('4', q22, q22, lambda, lambda);
        q22.addTransicao(t95);
        Transicao t96 = new Transicao('5', q22, q22, lambda, lambda);
        q22.addTransicao(t96);
        Transicao t97 = new Transicao('6', q22, q22, lambda, lambda);
        q22.addTransicao(t97);
        Transicao t98 = new Transicao('7', q22, q22, lambda, lambda);
        q22.addTransicao(t98);
        Transicao t99 = new Transicao('8', q22, q22, lambda, lambda);
        q22.addTransicao(t99);
        Transicao t100 = new Transicao('9', q22, q22, lambda, lambda);
        q22.addTransicao(t100);
        Transicao t101 = new Transicao('0', q22, q22, lambda, lambda);
        q22.addTransicao(t101);
        
        // Transição do estado Q22 para Q23
        
        Transicao t102 = new Transicao('.', q22, q23, lambda, lambda);
        q22.addTransicao(t102);
        
        // Transição do estados Q22 para Q25
        
        Transicao t103= new Transicao(')', q22, q25, lambda, lambda);
        q22.addTransicao(t103);
        
        // Transições do estado Q23 para Q24
        
        Transicao t104 = new Transicao('1', q23, q24, lambda, lambda);
        q23.addTransicao(t104);
        Transicao t105 = new Transicao('2', q23, q24, lambda, lambda);
        q23.addTransicao(t105);
        Transicao t106 = new Transicao('3', q23, q24, lambda, lambda);
        q23.addTransicao(t106);
        Transicao t107 = new Transicao('4', q23, q24, lambda, lambda);
        q23.addTransicao(t107);
        Transicao t108 = new Transicao('5', q23, q24, lambda, lambda);
        q23.addTransicao(t108);
        Transicao t109 = new Transicao('6', q23, q24, lambda, lambda);
        q23.addTransicao(t109);
        Transicao t110 = new Transicao('7', q23, q24, lambda, lambda);
        q23.addTransicao(t110);
        Transicao t111 = new Transicao('8', q23, q24, lambda, lambda);
        q23.addTransicao(t111);
        Transicao t112 = new Transicao('9', q23, q24, lambda, lambda);
        q23.addTransicao(t112);
        Transicao t113 = new Transicao('0', q23, q24, lambda, lambda);
        q23.addTransicao(t113);
        
        // Transições do estado Q24 para Q24
        
        Transicao t114 = new Transicao('1', q23, q24, lambda, lambda);
        q24.addTransicao(t114);
        Transicao t115 = new Transicao('2', q23, q24, lambda, lambda);
        q24.addTransicao(t115);
        Transicao t116 = new Transicao('3', q23, q24, lambda, lambda);
        q24.addTransicao(t116);
        Transicao t117 = new Transicao('4', q23, q24, lambda, lambda);
        q24.addTransicao(t117);
        Transicao t118 = new Transicao('5', q23, q24, lambda, lambda);
        q24.addTransicao(t118);
        Transicao t119 = new Transicao('6', q23, q24, lambda, lambda);
        q24.addTransicao(t119);
        Transicao t120 = new Transicao('7', q23, q24, lambda, lambda);
        q24.addTransicao(t120);
        Transicao t121 = new Transicao('8', q23, q24, lambda, lambda);
        q24.addTransicao(t121);
        Transicao t122 = new Transicao('9', q23, q24, lambda, lambda);
        q24.addTransicao(t122);
        Transicao t123 = new Transicao('0', q23, q24, lambda, lambda);
        q24.addTransicao(t123);
        
        // Transições do estado Q24 para Q25
        
        Transicao t124= new Transicao(')', q24, q25, lambda, lambda);
        q24.addTransicao(t124);
        
        // Transições do estado Q25 para Q25
         
        Transicao t125= new Transicao(')', q25, q25, 'x', lambda);
        q25.addTransicao(t125);
        
        // Transições do estado Q25 para Q1
        
        Transicao t126 = new Transicao('+', q25, q1, lambda, lambda);
        q25.addTransicao(t126);
        Transicao t127 = new Transicao('-', q25, q1, lambda, lambda);
        q25.addTransicao(t127);
        Transicao t128 = new Transicao('*', q25, q1, lambda, lambda);
        q25.addTransicao(t128);
        Transicao t129 = new Transicao('/', q25, q1, lambda, lambda);
        q25.addTransicao(t129);
        
        
        
         // Estados adicionados ao Array
   arrayEstados.add(q1);
   arrayEstados.add(q2);
   arrayEstados.add(q3);
   arrayEstados.add(q4);
   arrayEstados.add(q5);
   arrayEstados.add(q6);
   arrayEstados.add(q7);
   arrayEstados.add(q8);
   arrayEstados.add(q9);
   arrayEstados.add(q10);
   arrayEstados.add(q11);
   arrayEstados.add(q12);
   arrayEstados.add(q13);
   arrayEstados.add(q14);
   arrayEstados.add(q15);
   arrayEstados.add(q16);
   arrayEstados.add(q17);
   arrayEstados.add(q18);
   arrayEstados.add(q19);
   arrayEstados.add(q20);
   arrayEstados.add(q21);
   arrayEstados.add(q22);
   arrayEstados.add(q23);
   arrayEstados.add(q24);
   arrayEstados.add(q25);
   
   // Transições adicionados ao Array.
   
   
    arrayTransicoes.add(t1);
   arrayTransicoes.add(t2);
   arrayTransicoes.add(t3);
   arrayTransicoes.add(t4);
   arrayTransicoes.add(t5);
   arrayTransicoes.add(t6);
   arrayTransicoes.add(t7);
   arrayTransicoes.add(t8);
   arrayTransicoes.add(t9);
   arrayTransicoes.add(t10);
   
   
   arrayTransicoes.add(t11);
   arrayTransicoes.add(t12);
   arrayTransicoes.add(t13);
   arrayTransicoes.add(t14);
   arrayTransicoes.add(t15);
   arrayTransicoes.add(t16);
   arrayTransicoes.add(t17);
   arrayTransicoes.add(t18);
   arrayTransicoes.add(t19);
   arrayTransicoes.add(t20);
   
   
   arrayTransicoes.add(t21);
   arrayTransicoes.add(t22);
   arrayTransicoes.add(t23);
   arrayTransicoes.add(t24);
   arrayTransicoes.add(t25);
   arrayTransicoes.add(t26);
   arrayTransicoes.add(t27);
   arrayTransicoes.add(t28);
   arrayTransicoes.add(t29);
   
   arrayTransicoes.add(t30);
   arrayTransicoes.add(t31);
   arrayTransicoes.add(t32);
   arrayTransicoes.add(t33);
   arrayTransicoes.add(t34);
   arrayTransicoes.add(t35);
   arrayTransicoes.add(t36);
   arrayTransicoes.add(t37);
   arrayTransicoes.add(t38);
   arrayTransicoes.add(t39);
   arrayTransicoes.add(t40);
   
   

   arrayTransicoes.add(t41);
   arrayTransicoes.add(t42);
   arrayTransicoes.add(t43);
   arrayTransicoes.add(t44);
   arrayTransicoes.add(t45);
   arrayTransicoes.add(t46);
   arrayTransicoes.add(t47);
   arrayTransicoes.add(t48);
   arrayTransicoes.add(t49);
   arrayTransicoes.add(t50);
   
   
   arrayTransicoes.add(t51);
   arrayTransicoes.add(t52);
   arrayTransicoes.add(t53);
   arrayTransicoes.add(t54);
   arrayTransicoes.add(t55);
   arrayTransicoes.add(t56);
   arrayTransicoes.add(t57);
   arrayTransicoes.add(t58);
   arrayTransicoes.add(t59);
   arrayTransicoes.add(t60);
   
   
   arrayTransicoes.add(t61);
   arrayTransicoes.add(t62);
   arrayTransicoes.add(t63);
   arrayTransicoes.add(t64);
   arrayTransicoes.add(t65);
   arrayTransicoes.add(t66);
   arrayTransicoes.add(t67);
   arrayTransicoes.add(t68);
   arrayTransicoes.add(t69);
   arrayTransicoes.add(t70);
   
   
 
   arrayTransicoes.add(t72);
   arrayTransicoes.add(t73);
   arrayTransicoes.add(t74);
   arrayTransicoes.add(t75);
   arrayTransicoes.add(t76);
   arrayTransicoes.add(t77);
   arrayTransicoes.add(t78);
   arrayTransicoes.add(t79);
   arrayTransicoes.add(t80);
   
   arrayTransicoes.add(t81);
   arrayTransicoes.add(t82);
   arrayTransicoes.add(t83);
   arrayTransicoes.add(t84);
   arrayTransicoes.add(t85);
   arrayTransicoes.add(t86);
   arrayTransicoes.add(t87);
   arrayTransicoes.add(t88);
   arrayTransicoes.add(t89);
   arrayTransicoes.add(t90);
   
   arrayTransicoes.add(t91);
   arrayTransicoes.add(t92);
   arrayTransicoes.add(t93);
   arrayTransicoes.add(t94);
   arrayTransicoes.add(t95);
   arrayTransicoes.add(t96);
   arrayTransicoes.add(t97);
   arrayTransicoes.add(t98);
   arrayTransicoes.add(t99);
   arrayTransicoes.add(t90);
   
   arrayTransicoes.add(t91);
   arrayTransicoes.add(t92);
   arrayTransicoes.add(t93);
   arrayTransicoes.add(t94);
   arrayTransicoes.add(t95);
   arrayTransicoes.add(t96);
   arrayTransicoes.add(t97);
   arrayTransicoes.add(t98);
   arrayTransicoes.add(t99);
   arrayTransicoes.add(t90);
   
   
   arrayTransicoes.add(t101);
   arrayTransicoes.add(t102);
   arrayTransicoes.add(t103);
   arrayTransicoes.add(t104);
   arrayTransicoes.add(t105);
   arrayTransicoes.add(t106);
   arrayTransicoes.add(t107);
   arrayTransicoes.add(t108);
   arrayTransicoes.add(t109);
   arrayTransicoes.add(t110);
   

   arrayTransicoes.add(t111);
   arrayTransicoes.add(t112);
   arrayTransicoes.add(t113);
   arrayTransicoes.add(t114);
   arrayTransicoes.add(t115);
   arrayTransicoes.add(t116);
   arrayTransicoes.add(t117);
   arrayTransicoes.add(t118);
   arrayTransicoes.add(t119);
   arrayTransicoes.add(t120);
   
   arrayTransicoes.add(t121);
   arrayTransicoes.add(t122);
   arrayTransicoes.add(t123);
   arrayTransicoes.add(t124);
   arrayTransicoes.add(t125);
   arrayTransicoes.add(t126);
   arrayTransicoes.add(t127);
   arrayTransicoes.add(t128);
   arrayTransicoes.add(t129);
   
   
   
   
            jTextResult.setText(jTextResult.getText() + "\n---Automato da primeira parte da transição"
                    + " carregado---\n"  );

            String imprime ="Configurações dos estado \n";
            
            for(Transicao t: arrayTransicoes){
                
                jTextResult.setText(jTextResult.getText() +"\n---------CONFIGURAÇÕES DA TRANSIÇÃO----------\n" 
                                     +"\nSimbolo de transição :"+ t.getSimbolo() 
                                     +"\nEstado de origem :" + t.getOrigem().getNome()
                                     +"\nEstado destino :" + t.getProximo().getNome()
                                     +"\nEmpilha :" + t.getEmpilha()
                                     +"\nDesempilha :" + t.getDesempilha());
                
                
                /**
                imprime+=  "\n---------CONFIGURAÇÕES DA TRANSIÇÃO----------\n" 
                                     +"\nSimbolo de transição :"+ t.getSimbolo() 
                                     +"\nEstado de origem :" + t.getOrigem().getNome()
                                     +"\nEstado destino :" + t.getProximo().getNome()
                                     +"\nEmpilha :" + t.getEmpilha()
                                     +"\nDesempilha :" + t.getDesempilha();
                **/
                
                
                
            }
            
            for(Estado e: arrayEstados){
                
                jTextResult.setText(jTextResult.getText() +"\n---------CONFIGURAÇÃO DO ESTADO----------\n" 
                                     +"Simbolo do estado:"+ e.getNome()
                                       +"\nInicial: " +e.isEsInicial() 
                                       +"\nFinal: " +e.isEsFinal());
                
            }
  
                 jTextResult.setText(jTextResult.getText());

   
  
        
               //JOptionPane.showMessageDialog(this, "Configuração do automato da parte 1 do trabalho configurada com sucesso!");
        
        
        
        
    }//GEN-LAST:event_jButtonCarregarActionPerformed

    private void jTextTestaAlfabetoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextTestaAlfabetoActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextTestaAlfabetoActionPerformed
    private static final char lambda = '#';

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        
        
        
        
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(TelaPrincipal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(TelaPrincipal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(TelaPrincipal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(TelaPrincipal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new TelaPrincipal().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButtonAddEstados;
    private javax.swing.JButton jButtonCarregar;
    private javax.swing.JButton jButtonEntrarTransicao;
    private javax.swing.JButton jButtonInsereAlfabeto;
    private javax.swing.JButton jButtonInserePilha;
    private javax.swing.JButton jButtonSalvar;
    private javax.swing.JButton jButtonTestarEntrada;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JSeparator jSeparator4;
    private javax.swing.JTextField jTextDesempilha;
    private javax.swing.JTextField jTextEmpilha;
    private javax.swing.JTextField jTextEstadoDestino;
    private javax.swing.JTextField jTextEstadoOrigem;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JTextArea jTextResult;
    private javax.swing.JTextField jTextTestaAlfabeto;
    private javax.swing.JTextField jTextsimbolo;
    // End of variables declaration//GEN-END:variables
}
